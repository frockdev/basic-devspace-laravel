version: v2beta1
name: "-Your-best-Frock-project-"
vars:
  0_A_TOUCH:
    command: "bash"
    args: [ "-c", "mkdir -p helm && touch helm/values.yaml && mkdir -p values" ]
  DEVSPACE_ENV_FILE: ".env.infra.override"
  HELM_APP_CHART_REPOSITORY:
    source: env
    default: "https://github.com/frockdev/app-chart.git"
  HELM_LOCAL_VOLUME_CHART_REPOSITORY:
    source: env
    default: "https://github.com/frockdev/local-volume-chart.git"
  DEVSPACE_REPOSITORY:
    source: env
    default: "https://github.com/frockdev/basic-devspace-laravel.git"
  FROCK_DEV_PACKAGE_REPOSITORY:
    source: env
    default: "https://github.com/frockdev/tools-for-laravel.git"
  CONTRIBUTOR_NAME:
    source: env
    default: "SomeSomeBody"
  CURRENT_WORKING_DIR:
    command: "bash"
    args: ["-c", "pwd"]
  CURRENT_LOCAL_USER:
    command: "bash"
    args: ["-c", "id -u"]
  APPLICATION_ENV:
    source: env
    default: "local"
  APP_VERSION:
    source: env
    default: "localVersion"
  HELM_FORCE_UPGRADE:
    source: env
    default: "not-force"
  DEV_IMAGE:
    source: env
    default: "vladitot/php82-local:${INFRA_VERSION}"
  PROTOC_IMAGE:
    source: env
    default: "vladitot/protoc:${INFRA_VERSION}"
  YQ_RUNNER:
    source: env
    default: "docker run --rm -v ${CURRENT_WORKING_DIR}/values:/var/www/values -v ${CURRENT_WORKING_DIR}/helm:/var/www/helm -w /var/www mikefarah/yq"
  INFRA_VERSION:
    command: "bash"
    args: ["-c", "version=$(cat infra_version) && version=${version##*( )} && echo $version"]
  INFRA_VERSION_SEMVER:
    command: "bash"
    args: ["-c", "A=$(cat infra_version); if [ ${A:0:1} != \"v\" ]; then echo \"0.0.0\"; else echo ${A:1}; fi"]
  NAMESPACE:
    source: env
    default: ${DEVSPACE_NAME}-local

deployments:
  app: # this is main deployable chart. But it builds by special chart below
    namespace: ${NAMESPACE}
    helm:
      chart:
        name: helm
      releaseName: ${DEVSPACE_NAME}
      valuesFiles:
        - helm/values.yaml
      upgradeArgs:
        - "--wait"
        - "--set"
        - "infraVersion=${INFRA_VERSION}"

dev:
  app:
    namespace: ${NAMESPACE}
    container: main-${DEVSPACE_NAME}
    labelSelector:
      containerForDeveloper: "true"

commands:

  bash: |-
    devspace enter --label-selector "containerForDeveloper=true" --workdir /var/www/php -c main-${DEVSPACE_NAME} -n ${NAMESPACE} bash -- -l

  bash-xdebug: |-
    devspace enter --label-selector "containerForDeveloper=true"  --workdir /var/www/php -c main-${DEVSPACE_NAME} -n ${NAMESPACE} bash -- -c "export XDEBUG_MODE=debug && export XDEBUG_SESSION=PHPSTORM && bash -l"

  generate-from-proto:
    command: |-
      mkdir -p php/protoGenerated
      rm -rf php/protoGenerated/*
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=php ${DEV_IMAGE} /var/www/php/vendor/frock-dev/tools-for-laravel/resetNamespacesInComposerJson.php
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=composer ${DEV_IMAGE} install
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=php ${DEV_IMAGE} artisan frock:prepare-proto-files ${DEVSPACE_NAME}
      find protoPrepared -name '*.proto' -exec docker run --entrypoint sh --workdir=/var/www/php -v ${CURRENT_WORKING_DIR}:/var/www ${PROTOC_IMAGE} -c "protoc --proto_path=/var/www/protoPrepared --php_out=/var/www/php/protoGenerated --grpc_out=/var/www/php/protoGenerated --php-grpc_out=/var/www/php/protoGenerated --plugin=protoc-gen-php-grpc=/usr/local/go/bin/protoc-gen-php-grpc --plugin=protoc-gen-grpc=/usr/local/go/bin/grpc_php_plugin /var/www/"{} ';'
      rm -rf ${CURRENT_WORKING_DIR}/protoPrepared
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=php ${DEV_IMAGE} artisan frock:add-generated-namespaces-to-composer-json ${DEVSPACE_NAME}
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=composer ${DEV_IMAGE} install
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=php ${DEV_IMAGE} artisan frock:create-endpoints-from-proto
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=php ${DEV_IMAGE} artisan frock:add-to-array-to-grpc-objects
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=composer ${DEV_IMAGE} install
      devspace run codegen

  codegen:
    command: |-
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=php ${DEV_IMAGE} artisan frock:register-endpoints
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=php ${DEV_IMAGE} artisan frock:load-nats-endpoints
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=php ${DEV_IMAGE} artisan frock:load-http-endpoints
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=php ${DEV_IMAGE} artisan frock:generate-tests-for-public-methods-on-modules
  

  clear-new-service:
    internal: true
    command: |-
      rm infra_version || true
      rm -rf values || true
      rm -rf helm || true
      rm .gitignore || true
      rm -rf php || true
      rm -rf devspace || true

  create-new-service:
    command: |-
      touch infra_version
      echo "main" > infra_version

      mkdir -p values
      touch values/.gitignore
      echo override.values.yaml > values/.gitignore
      echo secrets.values.yaml >> values/.gitignore
      touch values/common.values.yaml
      touch values/local.values.yaml
      touch values/override.values.yaml
      touch values/preprod.values.yaml
      touch values/prod.values.yaml
      touch values/rc.values.yaml
      touch values/review.values.yaml
      touch values/secrets.values.yaml

      touch .gitignore
      echo ".env.infra.override" > .gitignore
      echo ".devspace" >> .gitignore
      echo ".idea" >> .gitignore
      echo "${DEVSPACE_NAME}.iml" >> .gitignore
      echo "devspace_installer_remove_if_not_needed_more.yaml" >> .gitignore

      devspace run install-laravel

      devspace run update-to-latest-version

      touch devspace_new.yaml
      echo "name: \"${DEVSPACE_NAME}\"" > devspace_new.yaml
      echo "version: v2beta1" >> devspace_new.yaml
      echo "imports:" >> devspace_new.yaml
      echo "  - path: devspace/devspace-laravel.yaml" >> devspace_new.yaml
      echo "    enabled: true" >> devspace_new.yaml
      mv devspace.yaml devspace_installer_remove_if_not_needed_more.yaml
      mv devspace_new.yaml devspace.yaml
      docker run --rm -v ${CURRENT_WORKING_DIR}/php:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www --entrypoint=php ${DEV_IMAGE} php /var/www/artisan vendor:publish --provider="FrockDev\ToolsForLaravel\FrockServiceProvider"


  enable-frock-laravel-dev-mode:
    command: |-
      rm -rf php/frock-laravel
      git clone "${FROCK_DEV_PACKAGE_REPOSITORY}" php/frock-laravel
      cd php/frock-laravel && git checkout main && cd ../../
      docker run --rm -v ${CURRENT_WORKING_DIR}/php/composer.json:/var/www/composer.json -v ${CURRENT_WORKING_DIR}/php/frock-laravel/frock-dev-install-helper.php:/var/www/frock-dev-install-helper.php --user=${CURRENT_LOCAL_USER} --workdir=/var/www --entrypoint=bash ${DEV_IMAGE} -c "REVERSE=0 php frock-dev-install-helper.php"
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=composer ${DEV_IMAGE} require frock-dev/tools-for-laravel:dev-main --ignore-platform-reqs
  #      rm -rf php/vendor/frock-dev/tools-for-laravel
  #      ln -s ../../frock-laravel php/vendor/frock-dev/tools-for-laravel

  check-frock-dev-unstaged:
    command: |-
      DIR=php/frock-laravel
      if [ -d "$DIR" ];
      then
        [[ -n $(cd php/frock-laravel && git status -s) ]] && echo "Wait, commit everything in frock-dev package" && exit 1
        echo "check OK"
      else
        echo "check OK"
      fi



  disable-frock-laravel-dev-mode:
    command: |-
      devspace run check-frock-dev-unstaged || exit 1
      docker run --rm -v ${CURRENT_WORKING_DIR}/php/composer.json:/var/www/composer.json -v ${CURRENT_WORKING_DIR}/php/frock-laravel/frock-dev-install-helper.php:/var/www/frock-dev-install-helper.php --user=${CURRENT_LOCAL_USER} --workdir=/var/www --entrypoint=bash ${DEV_IMAGE} -c "REVERSE=1 php frock-dev-install-helper.php"
      rm -rf php/frock-laravel
      PACKAGE_VERSION=${INFRA_VERSION}
      if [ ${INFRA_VERSION_SEMVER} == "0.0.0" ]; then PACKAGE_VERSION="dev-${PACKAGE_VERSION}"; fi
      echo $PACKAGE_VERSION
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=composer ${DEV_IMAGE} require frock-dev/tools-for-laravel:${PACKAGE_VERSION} --ignore-platform-reqs

  install-specified-version-frock-laravel:
    command: |-
      docker run --rm -v ${CURRENT_WORKING_DIR}:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www/php --entrypoint=composer ${DEV_IMAGE} require frock-dev/tools-for-laravel:${1} --ignore-platform-reqs

  install-app-helm-chart:
    command: devspace run install-specified-version-app-helm-chart ${INFRA_VERSION}

  install-devspace-laravel:
    command: devspace run install-specified-devspace-laravel ${INFRA_VERSION}

  #  install-local-volume-helm-chart:
  #    command: devspace run install-specified-version-app-helm-chart ${INFRA_VERSION}

  install-specified-devspace-laravel:
    command: |-
      specified_infra_version=${1}
      rm -rf devspace && rm -rf devspace-cloned
      git clone "${DEVSPACE_REPOSITORY}" devspace-cloned
      cd devspace-cloned && git checkout ${specified_infra_version} > /dev/null 2>&1 && cd ../
      rm -rf devspace && mv devspace-cloned devspace && rm -rf devspace/.git && rm -rf devspace/.github

  install-specified-version-app-helm-chart:
    command: |-
      specified_infra_version=${1}
      rm -rf helm && rm -rf helm-cloned
      git clone "${HELM_APP_CHART_REPOSITORY}" helm-cloned
      cd helm-cloned && git checkout ${specified_infra_version} > /dev/null 2>&1 && cd ../
      rm -rf helm && mv helm-cloned helm && rm -rf helm/.git && rm -rf helm/.github

  push-infra-everything:
    command: |-
      devspace run push-changes-app-helm-chart || true
      devspace run push-changes-devspace-laravel || true
      DIR=php/frock-laravel
      if [ -d "$DIR" ];
      then
      devspace run push-changes-frock-laravel || true
      fi  

  push-changes-frock-laravel:
    command: |-
      cd php/frock-laravel && git add . && git commit -m "update to ${INFRA_VERSION}" && git checkout -B ${INFRA_VERSION}-update-from-${CONTRIBUTOR_NAME} && git push --force -u origin main && cd ../../


  push-changes-devspace-laravel:
    command: |-
      rm -rf devspace-cloned
      git clone "${DEVSPACE_REPOSITORY}" devspace-cloned
      cd devspace-cloned && git checkout ${INFRA_VERSION}  > /dev/null 2>&1 && git checkout -b ${INFRA_VERSION}-update-from-${CONTRIBUTOR_NAME} && cd ../
      cd devspace-cloned && rm -rf * && cd ../
      cp -r devspace/* devspace-cloned/
      cd devspace-cloned && git add . && git commit -m "update to ${INFRA_VERSION}" || true && cd ../
      cd devspace-cloned && git push --force -u origin ${INFRA_VERSION}-update-from-${CONTRIBUTOR_NAME} && cd ../
    after: |-
      rm -rf devspace-cloned

  push-changes-app-helm-chart:
    command: |-
      rm -rf helm-cloned
      git clone "${HELM_APP_CHART_REPOSITORY}" helm-cloned
      cd helm-cloned && git checkout ${INFRA_VERSION}  > /dev/null 2>&1 && git checkout -b ${INFRA_VERSION}-update-from-${CONTRIBUTOR_NAME} && cd ../
      cd helm-cloned && rm -rf * && cd ../
      cp -r helm/* helm-cloned/
      cp -r helm/.gitignore helm-cloned/.gitignore
      cd helm-cloned && git add . && git commit -m "update to ${INFRA_VERSION}" || true && cd ../
      cd helm-cloned && git push --force -u origin ${INFRA_VERSION}-update-from-${CONTRIBUTOR_NAME} && cd ../
    after: |-
      rm -rf helm-cloned

  update-to-latest-version:
    command: |-
      devspace purge
      rm -rf helm-cloned
      git clone "${HELM_APP_CHART_REPOSITORY}" helm-cloned
      cd helm-cloned && LATEST=$(git tag -l --sort=-version:refname | head -n 1) && cd ../
      echo ${LATEST} > infra_version
      devspace run install-specified-version-app-helm-chart ${LATEST}
      devspace run install-specified-version-frock-laravel ${LATEST}
      devspace run install-specified-devspace-laravel ${LATEST}
    after: |-
      rm -rf helm-cloned

  uninstall-local-nats: |-
    helm uninstall --namespace nats nats

  uninstall-local-jaeger: |-
    helm uninstall --namespace jaeger jaeger-all-in-one

  install-local-ngrok: |-
    helm repo add ngrok https://ngrok.github.io/kubernetes-ingress-controller
    helm install ngrok-ingress-controller ngrok/kubernetes-ingress-controller \
    --set credentials.apiKey=`${YQ_RUNNER} -r '.ngrok.apiToken' values/override.values.yaml` \
    --set credentials.authtoken=`${YQ_RUNNER} -r '.ngrok.authToken' values/override.values.yaml`

  install-local-jaeger: |-
    helm repo add jaeger-all-in-one https://raw.githubusercontent.com/hansehe/jaeger-all-in-one/master/helm/charts
    helm install --namespace jaeger --create-namespace jaeger-all-in-one jaeger-all-in-one/jaeger-all-in-one \
      --set ingress.enabled=true \
      --set ingress.className=nginx \
      --set ingress.hosts[0].host=jaeger.localhost \
      --set ingress.hosts[0].paths[0].path=/ \
      --set ingress.hosts[0].paths[0].pathType=ImplementationSpecific
    

  install-local-nats: |-
    helm repo add nats https://nats-io.github.io/k8s/helm/charts/
    helm upgrade --install nats nats/nats --namespace nats --create-namespace \
      --set config.jetstream.enabled=true \
      --set config.jetstream.fileStore.pvc.size=1Gi

  install-local-dependencies: |-
    helm repo add nginx-stable https://helm.nginx.com/stable
    helm repo update
    helm upgrade --install nginx-stable nginx-stable/nginx-ingress --namespace ingress-nginx --create-namespace --version 0.18.1

  logs: |-
    devspace logs -f -n ${NAMESPACE}
  restart: |-
    kubectl -n ${NAMESPACE} rollout restart deployment "${DEVSPACE_NAME}-app"

  nats-cli:
    command: kubectl run -i --rm --tty nats-box --image=natsio/nats-box --restart=Never

  get-app-name: |-
    echo ${DEVSPACE_NAME}
  get-namespace: |-
    echo ${NAMESPACE}
  get-xdebug-host: |-
    echo ${XDEBUG_HOST}
  remove-local-volume: |-
    helm uninstall --namespace ${NAMESPACE} localvolume || true
  initialize: |-
    devspace run install-ingress
    devspace run create-local-volume
  initialize2: |-
    cd infra/cdk8s/ && npm install && cd ../../
    devspace run remove-local-volume
    devspace run install-ingress
    devspace run create-local-volume
  get-infra-version: |-
    echo ${INFRA_VERSION}
  get-primary-image: |-
    echo ${PRIMARY_IMAGE}
  get-secondary-image: |-
    echo ${SECONDARY_IMAGE}
  generate-manifests: |-
    cd infra/cdk8s && npm run compile && npm run synth
  generate-manifests-directly: |-
    rm -rf infra/cdk8s/main.ts
    rm -rf infra/cdk8s/main.js
    rm -rf infra/cdk8s/main.d.ts
    cp infra/cdk8s/${DEVSPACE_NAME}.ts infra/cdk8s/main.ts
    if [[ $DEPLOYMENT_ENV != "local" ]]
    then
      if [[ $CLUSTER != "xdebug" ]]
      then
        cd infra/cdk8s && npm install && cd ../../
      fi
    fi
    [ ! -d "infra/cdk8s" ] && cd infra/cdk8s && npm install && cd ../../
    cd infra/cdk8s && npm run compile && node main.js && cd ../../
    rm -rf infra/cdk8s/main.ts
    rm -rf infra/cdk8s/main.js
    rm -rf infra/cdk8s/main.d.ts
  env: |-
    env
  #- name: kobra-graph
  #  command: kobra graph --reference "${APP_NAME}=master&widget=ops-test4"
  #secrets: |-
  #  WORKDIR=infra/projects/${APP_NAME}/kustomize/base
  #  if [[ $CLUSTER == "gcp" ]]
  #  then
  #    GOOGLE_APPLICATION_CREDENTIALS=$SOPS_KEY sops -d ${WORKDIR}/configmaps/${DEPLOYMENT_ENV}.env > ${WORKDIR}/.configmap
  #  else
  #    AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY SOPS_KMS_ARN=$SOPS_KMS_ARN sops -d ${WORKDIR}/configmaps/aws-${DEPLOYMENT_ENV}.env > ${WORKDIR}/.configmap
  #  fi





  #####
  # frock.dev commands
  #####
  install-laravel: |-
    rm -rf php/
    mkdir -p php
    docker run --rm -v ${CURRENT_WORKING_DIR}/php:/var/www --user=${CURRENT_LOCAL_USER} --workdir=/var/www --entrypoint=composer ${DEV_IMAGE} create-project --prefer-dist laravel/laravel .








#  #### START DEPRECATION BLOCK, USED ONLY FOR WIDGET AND OTHER PROJECTS
#  #### DO NOT USE THIS WAY ON NEW PROJECTS
#  composer-install: |-
#    devspace enter --label-selector "terminal-container=terminal" -c primary -n ${NAMESPACE} bash -- -c "cd /var/www && composer install"
#    devspace sync --download-only --config=devspace.yaml --no-watch || true
#  tests: |-
#    devspace run composer-install
#    devspace enter --label-selector "terminal-container=terminal" -c primary -n ${NAMESPACE} bash -- -c "php /var/www/vendor/bin/phpunit"
#  style: |-
#    devspace run composer-install
#    devspace enter --label-selector "terminal-container=terminal" -c primary -n ${NAMESPACE} bash -- -c "php /var/www/vendor/bin/php-cs-fixer fix --diff --dry-run -v --using-cache=no"
#  tests-local: |-
#    devspace enter --label-selector "terminal-container=terminal" -c primary -n ${NAMESPACE} bash -- -c "php /var/www/vendor/bin/phpunit"
#  stat-local: |-
#    devspace enter --label-selector "terminal-container=terminal" -c primary -n ${NAMESPACE} bash -- -c "php /var/www/vendor/bin/phpstan analyse --configuration=phpstan.neon --memory-limit=-1"
#  style-local: |-
#    devspace enter --label-selector "terminal-container=terminal" -c primary -n ${NAMESPACE} bash -- -c "php /var/www/vendor/bin/php-cs-fixer fix --diff --dry-run -v --using-cache=no"
#  ##### END DEPRECATION BLOCK
#  #####

#  stat: |-
#    devspace run composer-install
#    devspace enter --label-selector "terminal-container=terminal" -c primary -n ${NAMESPACE} bash -- -c "php /var/www/vendor/bin/phpstan analyse --configuration=phpstan.neon --memory-limit=-1"
#
#  codestyle-check: |-
#    devspace run composer-install
#    devspace enter --label-selector "terminal-container=terminal" -c primary -n ${NAMESPACE} bash -- -c "php /var/www/artisan fixer:fix --diff --dry-run -v --using-cache=no"
#
#  run-parallel-tests: |-
#    devspace run composer-install
#    devspace enter --label-selector "terminal-container=terminal" -c primary -n ${NAMESPACE} bash -- -c "php /var/www/artisan test --parallel --recreate-databases"
#
#  prepare: |-
#    devspace enter --label-selector "terminal-container=terminal" -c primary -n ${NAMESPACE} bash -- -c " \
#        php /var/www/artisan migrate \
#          && php /var/www/artisan ide-helper:generate \
#          && php /var/www/artisan ide-helper:models -W \
#          && php /var/www/artisan fixer:fix \
#          && make rewrite-doc \
#          && php /var/www/vendor/bin/phpstan analyse --configuration=phpstan.neon
#    "


functions:

  render-final-yaml: |-
    mkdir -p values
    touch values/secrets.values.yaml 
    touch values/override.values.yaml && ${YQ_RUNNER} eval-all '. as $item ireduce ({}; . * $item)' values/common.values.yaml values/${APPLICATION_ENV}.values.yaml values/override.values.yaml values/secrets.values.yaml > helm/values.yaml
    echo "" >> helm/values.yaml
    echo "projectName: ${DEVSPACE_NAME}" >> helm/values.yaml
    echo "localProjectDirectory: ${CURRENT_WORKING_DIR}" >> helm/values.yaml

  fill-sample-chart-file: |-
    mkdir -p helm
    touch helm/Chart.example.yaml
    rm -rf helm/Chart.yaml
    cp helm/Chart.example.yaml helm/Chart.yaml
    echo "name: ${DEVSPACE_NAME}" >> helm/Chart.yaml
    echo "appVersion: \"${APP_VERSION}\"" >> helm/Chart.yaml
    echo "version: ${INFRA_VERSION_SEMVER}" >> helm/Chart.yaml

pipelines:
  dev:
    run: |-
      devspace use namespace ${NAMESPACE}
      run_dependencies --all
      ensure_pull_secrets --all
      build_images --all
      fill-sample-chart-file
      render-final-yaml
      create_deployments app
      start_dev --all
  deploy:
    run: |-
      devspace use namespace ${NAMESPACE}
      run_dependencies --all
      ensure_pull_secrets --all
      build_images --all
      fill-sample-chart-file
      render-final-yaml
      if [ ${HELM_FORCE_UPGRADE} == "force" ]; then helm uninstall -n ${NAMESPACE} ${DEVSPACE_NAME}; fi
      create_deployments app
  build: |-
    devspace use namespace ${NAMESPACE}
    run_dependencies --all --pipeline build
    build_images --all
  purge: |-
    devspace use namespace ${NAMESPACE}
    fill-sample-chart-file
    render-final-yaml
    stop_dev --all
    purge_deployments app
    run_dependencies --all --pipeline purge
    helm uninstall -n ${NAMESPACE} ${DEVSPACE_NAME} > /dev/null 2>&1 || true

